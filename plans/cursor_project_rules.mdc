---
description: Apply these rules when creating the project
globs:
alwaysApply: true
---
## Project Overview

*   **Type:** cursor_project_rules
*   **Description:** The AcceptanceGate API is a RESTful service designed to manage and automate the entire acceptance certification process for various regulatory systems in Saudi Arabia. It handles multiple certification types including Technical Regulations, Energy, Water, Halal, Saudi Code, and Laboratory certifications. The API provides a centralized platform that processes, validates, and issues acceptance certificates, ensuring full regulatory compliance and traceability from submission through approval and issuance.
*   **Primary Goal:** Streamline and automate the certificate request lifecycle by implementing a robust workflow for submission, administrative review, and final governmental approval, thereby reducing manual errors and ensuring adherence to Saudi regulatory requirements.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   **Angular:**

        *   Use Angular's routing module (e.g., `app-routing.module.ts`) to manage client-side routes for any admin or dashboard components. Modularize routes with lazy loading for enhanced performance.

    *   **.NET Core 8.0.0 using ABP Framework:**

        *   Implement attribute-based routing in the `Controllers/` directory. Use RESTful conventions, e.g., `[Route("api/[controller]")]`, to handle certificate related endpoints.

    *   Example: For a certificate endpoint, route could be defined in `Controllers/CertificateController.cs` with methods mapped to HTTP verbs (GET, POST, PUT, DELETE).

### Core Directories

*   **Versioned Structure:**

    *   **Controllers:**

        *   Contains API controllers using .NET Core and ABP framework. Example: `Controllers/CertificateController.cs` handles incoming certificate requests.

    *   **Services:**

        *   Houses business logic implementations. Example: `Services/CertificateService.cs` performs operations such as validation, workflow state management, and certificate issuance.

    *   **Repositories:**

        *   Responsible for data access and storage related to certificate requests and regulatory compliance.

    *   **Angular Components (if applicable):**

        *   Organized into modules and components for any admin dashboards or UI elements interfacing with the API.

### Key Files

*   **Stack-Versioned Patterns:**

    *   **.NET Core (ABP Framework) Files:**

        *   `Controllers/CertificateController.cs`: Implements RESTful endpoints for certificate management.
        *   `Program.cs`: Configures application services, routing, and middleware essential for the API.

    *   **Angular Files:**

        *   `app-routing.module.ts`: Defines client-side routes using Angular's RouterModule.
        *   `app.component.ts`: Bootstraps the Angular application and integrates with the API as required.

## Tech Stack Rules

*   **Version Enforcement:**

    *   **Angular@latest:**

        *   Enforce modular routing and component-based architecture.
        *   Maintain consistent coding standards and directory structures using Angular CLI best practices.

    *   **.NET Core 8.0.0 (ABP Framework):**

        *   Utilize attribute-based routing and dependency injection as per ABP guidelines.
        *   Ensure that RESTful controller patterns are followed, with robust error handling and logging mechanisms.

## PRD Compliance

*   **Non-Negotiable:**

    *   "The API must adhere to Saudi regulatory compliance standards, ensuring that every step—from certificate request submission to final approval and issuance—is fully traceable and auditable." This mandates strict adherence to defined workflows, data integrity, and secure storage protocols.

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   **Certificate Request Process Flow:**

        *   **User Lookup and Selection:** Retrieve technical regulations lookup list (e.g., from an endpoint like `api/lookup/technical-regulations`).
        *   **Accreditation Summary and Attachment Upload:** Submit accreditation details and upload required documents via `api/certificates/attachments`.
        *   **Qualification of Entity's Employees:** Submit employee qualification details, integrating with endpoints such as `api/certificates/qualifications`.
        *   **Administrative Review:** Admin reviews incoming requests via `api/admin/review`, providing feedback if corrections are needed.
        *   **Government Officials Approval:** Final approval and certificate issuance are completed through `api/government/approval` leading to certificate generation.

## Best Practices

*   **Angular**

    *   Maintain clear separation of concerns by using components, services, and modules.
    *   Utilize lazy loading and route guards for optimal performance and security.
    *   Strictly follow Angular Style Guide recommendations for code consistency and maintainability.

*   **.NET Core (ABP Framework)**

    *   Use dependency injection heavily to promote loose coupling and testability.
    *   Implement comprehensive error handling and logging using built-in middleware.
    *   Adhere to RESTful principles and ABP framework conventions to ensure scalability and maintainability.
    *   Regularly update dependencies and patches to maintain security standards.

## Rules

*   Derive folder/file patterns **directly** from tech stack versions and guidelines as outlined above.
*   For .NET Core using ABP Framework: Use the `Controllers/` directory for endpoint definitions and strictly follow attribute routing.
*   For Angular: Use `app-routing.module.ts` to define routes and ensure modular component structures; do not mix Angular routing with .NET Core routing patterns.
*   Enforce version-specific practices as detailed to avoid mixing conventions (e.g., ensure .NET Core REST endpoints are not embedded within Angular client code).
*   Review and update routing and structure patterns as new versions or framework updates are adopted, keeping compliance with PRD and best practices.
